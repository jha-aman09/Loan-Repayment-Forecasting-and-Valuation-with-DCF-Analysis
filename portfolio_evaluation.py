# -*- coding: utf-8 -*-
"""Portfolio Evaluation and Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RXct92_a1BeZaNu4XcQGhWA5oFQfyVAQ
"""

import pandas as pd
import numpy as np

# Step 1: Load and inspect the data
data = pd.read_csv('/content/drive/MyDrive/Data.csv', sep=';')
data = data.rename(columns={data.columns[0]: 'Date'}).set_index('Date')
# Rename columns for easier reference
data.rename(columns={'Unnamed: 0': 'Vintage'}, inplace=True)

# Convert data columns to numeric where possible
for col in data.columns[1:]:
    data[col] = pd.to_numeric(data[col], errors='coerce')

# Define the annual discount rate and convert it to monthly rate
annual_discount_rate = 0.025
monthly_discount_rate = (1 + annual_discount_rate) ** (1/12) - 1

# Historical repayment percentages
repayment_percentages = data.iloc[:, 2:].div(data['Origination Amount'], axis=0)

# Forecast repayment percentages
def forecast_repayment(p1, p2, i, past_repayments):
    if i == 1:
        return p1
    elif i == 2:
        return p2
    else:
        term = (1 - (i - 1) / 30) * (1 - sum(past_repayments))
        return max(p2 * np.log(1 + term), 0)

# Forecasting repayments for each vintage
forecasted_repayments = []
for index, row in data.iterrows():
    origination = row['Origination Amount']
    known_repayments = repayment_percentages.loc[index].dropna().values
    p1 = known_repayments[0]
    p2 = known_repayments[1] if len(known_repayments) > 1 else 2 * p1
    past_repayments = list(known_repayments[:2])  # Start with known values
    vintage_forecast = []

    for i in range(1, 31):  # Months 1 to 30
        pi = forecast_repayment(p1, p2, i, past_repayments)
        vintage_forecast.append(pi)
        if i >= len(past_repayments):
            past_repayments.append(pi)

    forecasted_repayments.append(vintage_forecast)

# Convert forecasted percentages to cash flows
forecasted_repayments = pd.DataFrame(forecasted_repayments)
forecasted_cash_flows = forecasted_repayments.mul(data['Origination Amount'], axis=0)

# Discount future cash flows
discounted_cash_flows = forecasted_cash_flows.div((1 + monthly_discount_rate) ** np.arange(1, 31), axis=1)

# Total portfolio value
portfolio_value = discounted_cash_flows.sum().sum()

# Compare with client's estimate
client_estimate = 84993122.67
absolute_difference = abs(portfolio_value - client_estimate)
relative_difference = absolute_difference / client_estimate * 100

# Results
print("Portfolio Value (Calculated): CHF {:.2f}".format(portfolio_value))
print("Client Estimate: CHF {:.2f}".format(client_estimate))
print("Absolute Difference: CHF {:.2f}".format(absolute_difference))
print("Relative Difference: {:.2f}%".format(relative_difference))

# Acceptability Check
if absolute_difference < 500000:
    print("The difference is within the acceptable threshold.")
else:
    print("The difference exceeds the acceptable threshold.")